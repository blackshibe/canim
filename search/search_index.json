{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Info I give no guarantees about the amount of bugs in this library. While it works without issues in production, there may be problems I am unaware of. If you have questions or issues, feel free to contact me on Discord (Black Shibe#4208) canim is a roblox-ts written library that allows you to have more control over your animations. Features \u00b6 Animation overlap \u00b6 Canim lets you play multiple animations on top of each other if they are rebased. You can see this implemented in Deadline , for example when using the radio and shooting at the same time. Rebasing \u00b6 Deadline reuses magcheck and radio-hold pose animations for multiple weapons easily using animation rebasing. This lets you cut down on time spent animating things. Infinite animation priorities \u00b6 I honestly couldn't tell you why Roblox doesn't implement this already. Animations are sorted based off of number priority, not an Enum with 4 possible values. Editing animations at runtime \u00b6 You can create, import or edit animations when the game is running without having to reupload them. Preloading animations \u00b6 All animations are loaded with a lookup table. You can call it for every needed animation when the game is loading to ensure everything plays instantly after. Separation of concerns \u00b6 Animations are split into Tracks and Poses. Poses only play a single keyframe to increase performance. Non-linear easing \u00b6 Animations fade out with quad in-out easing instead of ugly linear easing. Per-axis blending \u00b6 You can do this: // the animation will play with lowered rotation and with unaffected position animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; Caveats \u00b6 Performance \u00b6 I have not tested how fast the default roblox animator is. Canim flattens the motor structure in order to make lookups when animating faster, but this may break rigs that have multiple Motor6D instances with the same name. Lack of throttling \u00b6 Canim does not implement animator throttling. Easing \u00b6 Canim does not implement any other easing than linear at the moment, considering it is designed to be played with animations exported from blender. This is very easy to implement yourself.","title":"Home"},{"location":"#features","text":"","title":"Features"},{"location":"#animation-overlap","text":"Canim lets you play multiple animations on top of each other if they are rebased. You can see this implemented in Deadline , for example when using the radio and shooting at the same time.","title":"Animation overlap"},{"location":"#rebasing","text":"Deadline reuses magcheck and radio-hold pose animations for multiple weapons easily using animation rebasing. This lets you cut down on time spent animating things.","title":"Rebasing"},{"location":"#infinite-animation-priorities","text":"I honestly couldn't tell you why Roblox doesn't implement this already. Animations are sorted based off of number priority, not an Enum with 4 possible values.","title":"Infinite animation priorities"},{"location":"#editing-animations-at-runtime","text":"You can create, import or edit animations when the game is running without having to reupload them.","title":"Editing animations at runtime"},{"location":"#preloading-animations","text":"All animations are loaded with a lookup table. You can call it for every needed animation when the game is loading to ensure everything plays instantly after.","title":"Preloading animations"},{"location":"#separation-of-concerns","text":"Animations are split into Tracks and Poses. Poses only play a single keyframe to increase performance.","title":"Separation of concerns"},{"location":"#non-linear-easing","text":"Animations fade out with quad in-out easing instead of ugly linear easing.","title":"Non-linear easing"},{"location":"#per-axis-blending","text":"You can do this: // the animation will play with lowered rotation and with unaffected position animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ];","title":"Per-axis blending"},{"location":"#caveats","text":"","title":"Caveats"},{"location":"#performance","text":"I have not tested how fast the default roblox animator is. Canim flattens the motor structure in order to make lookups when animating faster, but this may break rigs that have multiple Motor6D instances with the same name.","title":"Performance"},{"location":"#lack-of-throttling","text":"Canim does not implement animator throttling.","title":"Lack of throttling"},{"location":"#easing","text":"Canim does not implement any other easing than linear at the moment, considering it is designed to be played with animations exported from blender. This is very easy to implement yourself.","title":"Easing"},{"location":"API/Canim/","text":"Canim \u00b6 Methods \u00b6 Canim.assign_model \u00b6 Canim.assign_model(model: Model): void Connects a model to the animator. Info You can run this multiple times. Canim.load_animation \u00b6 Canim.load_animation(name: string, priority: number, id: string | KeyframeSequence): CanimTrack Registers and begins loading the given animation. It can then be played with Canim.load_animation using the name provided to load_animation. Caution This does not yield! you must wait for the animation to finish loading. See CanimTrack.finished_loading . Canim.load_pose \u00b6 Canim.load_pose(name: string, priority: number, id: string | KeyframeSequence): CanimPose Registers and begins loading the given pose. It can then be played with Canim.play_pose using the name provided to load_pose. This takes in an AnimationTrack of any given animation length. Only the first frame of it is used. Caution This does not yield! you must wait for the animation to finish loading. See CanimPose.finished_loading . Canim.play_animation \u00b6 Canim.play_animation(id: string): void Plays a track. Canim.play_pose \u00b6 Canim.play_pose(id: string): void Plays a pose. Info You can run this multiple times. Canim.stop_animation \u00b6 Canim.stop_animation(name: string): void Stops playing any given pose or track. Canim.update \u00b6 Canim.update(delta_time: number): void Steps the animation player forward by delta_time . Caution Canim does not connect this to RunService automatically! Canim.destroy \u00b6 Canim.destroy(): void Cleans up the class and all animations. Properties \u00b6 Canim.animations \u00b6 Canim.animations: { [index: string]: CanimTrack | CanimPose | undefined; } = {}; Array of loaded animations. Canim.playing_animations \u00b6 Canim.playing_animations: CanimTrack[] Array of playing tracks. Canim.playing_poses \u00b6 Canim.playing_poses: CanimPose[] Array of playing poses. Canim.debug \u00b6 Canim.debug: string[] Contains information about currently playing tracks and poses.","title":"Canim"},{"location":"API/Canim/#canim","text":"","title":"Canim"},{"location":"API/Canim/#methods","text":"","title":"Methods"},{"location":"API/Canim/#canimassign_model","text":"Canim.assign_model(model: Model): void Connects a model to the animator. Info You can run this multiple times.","title":"Canim.assign_model"},{"location":"API/Canim/#canimload_animation","text":"Canim.load_animation(name: string, priority: number, id: string | KeyframeSequence): CanimTrack Registers and begins loading the given animation. It can then be played with Canim.load_animation using the name provided to load_animation. Caution This does not yield! you must wait for the animation to finish loading. See CanimTrack.finished_loading .","title":"Canim.load_animation"},{"location":"API/Canim/#canimload_pose","text":"Canim.load_pose(name: string, priority: number, id: string | KeyframeSequence): CanimPose Registers and begins loading the given pose. It can then be played with Canim.play_pose using the name provided to load_pose. This takes in an AnimationTrack of any given animation length. Only the first frame of it is used. Caution This does not yield! you must wait for the animation to finish loading. See CanimPose.finished_loading .","title":"Canim.load_pose"},{"location":"API/Canim/#canimplay_animation","text":"Canim.play_animation(id: string): void Plays a track.","title":"Canim.play_animation"},{"location":"API/Canim/#canimplay_pose","text":"Canim.play_pose(id: string): void Plays a pose. Info You can run this multiple times.","title":"Canim.play_pose"},{"location":"API/Canim/#canimstop_animation","text":"Canim.stop_animation(name: string): void Stops playing any given pose or track.","title":"Canim.stop_animation"},{"location":"API/Canim/#canimupdate","text":"Canim.update(delta_time: number): void Steps the animation player forward by delta_time . Caution Canim does not connect this to RunService automatically!","title":"Canim.update"},{"location":"API/Canim/#canimdestroy","text":"Canim.destroy(): void Cleans up the class and all animations.","title":"Canim.destroy"},{"location":"API/Canim/#properties","text":"","title":"Properties"},{"location":"API/Canim/#canimanimations","text":"Canim.animations: { [index: string]: CanimTrack | CanimPose | undefined; } = {}; Array of loaded animations.","title":"Canim.animations"},{"location":"API/Canim/#canimplaying_animations","text":"Canim.playing_animations: CanimTrack[] Array of playing tracks.","title":"Canim.playing_animations"},{"location":"API/Canim/#canimplaying_poses","text":"Canim.playing_poses: CanimPose[] Array of playing poses.","title":"Canim.playing_poses"},{"location":"API/Canim/#canimdebug","text":"Canim.debug: string[] Contains information about currently playing tracks and poses.","title":"Canim.debug"},{"location":"API/Exports/","text":"Exports \u00b6 cache_get_keyframe_sequence \u00b6 cache_get_keyframe_sequence(id: string): KeyframeSequence Downloads a KeyframeSequence based on ID.","title":"Exports"},{"location":"API/Exports/#exports","text":"","title":"Exports"},{"location":"API/Exports/#cache_get_keyframe_sequence","text":"cache_get_keyframe_sequence(id: string): KeyframeSequence Downloads a KeyframeSequence based on ID.","title":"cache_get_keyframe_sequence"},{"location":"API/Pose/","text":"CanimPose \u00b6 The class used for poses in the library. It shares many similiarities with CanimTrack, however canim avoids inheritance. Methods \u00b6 CanimPose.load_sequence \u00b6 cache_get_keyframe_sequence(id: string): KeyframeSequence Loads the AnimationTrack for the pose. Does not yield and fires finished_loading when it's finished. Caution Canim calls this automatically. There is no reason to do it yourself. Events \u00b6 CanimPose.keyframe_reached \u00b6 CanimPose.keyframe_reached: Signal Fires when a named keyframe is stepped over in the animator. CanimPose.finished_loading \u00b6 CanimPose.finished_loading: Signal Fires when the animation finishes loading. CanimPose.started \u00b6 CanimPose.started: Signal Fires when the animation starts. CanimPose.finished \u00b6 CanimPose.finished: Signal Fires when the animation ends. Properties \u00b6 CanimPose.keyframe \u00b6 CanimPose.keyframe?: customKeyframe Contains animation data that Canim interprets. You can edit this to change the animation data. nil if the animation is unloaded. CanimPose.bone_weights \u00b6 CanimPose.bone_weights: { [index: string]: number | undefined } = {}; Controls how much individual axis of individual Motor6D Transforms are affected by this animation. you can use __CANIM_DEFAULT_BONE_WEIGHT for the index to affect all bones: animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 1 , 1 , 0.1 ], ]; Note this property is additionally multiplied by CanimPose.weight. CanimPose.name \u00b6 CanimPose.name: string Name of the pose. CanimPose.priority \u00b6 CanimPose.priority: number Priority of the pose. CanimPose.fading \u00b6 CanimPose.fading: boolean Whether the pose is fading out. CanimPose.fade_time \u00b6 CanimPose.fade_time: number Controls how quickly the pose fades out after stopping. CanimPose.stopping \u00b6 CanimPose.stopping: boolean If true, the Pose will stop playing at the next Canim.update call. CanimPose.time \u00b6 CanimPose.time: number How long the animation has played for.","title":"CanimPose"},{"location":"API/Pose/#canimpose","text":"The class used for poses in the library. It shares many similiarities with CanimTrack, however canim avoids inheritance.","title":"CanimPose"},{"location":"API/Pose/#methods","text":"","title":"Methods"},{"location":"API/Pose/#canimposeload_sequence","text":"cache_get_keyframe_sequence(id: string): KeyframeSequence Loads the AnimationTrack for the pose. Does not yield and fires finished_loading when it's finished. Caution Canim calls this automatically. There is no reason to do it yourself.","title":"CanimPose.load_sequence"},{"location":"API/Pose/#events","text":"","title":"Events"},{"location":"API/Pose/#canimposekeyframe_reached","text":"CanimPose.keyframe_reached: Signal Fires when a named keyframe is stepped over in the animator.","title":"CanimPose.keyframe_reached"},{"location":"API/Pose/#canimposefinished_loading","text":"CanimPose.finished_loading: Signal Fires when the animation finishes loading.","title":"CanimPose.finished_loading"},{"location":"API/Pose/#canimposestarted","text":"CanimPose.started: Signal Fires when the animation starts.","title":"CanimPose.started"},{"location":"API/Pose/#canimposefinished","text":"CanimPose.finished: Signal Fires when the animation ends.","title":"CanimPose.finished"},{"location":"API/Pose/#properties","text":"","title":"Properties"},{"location":"API/Pose/#canimposekeyframe","text":"CanimPose.keyframe?: customKeyframe Contains animation data that Canim interprets. You can edit this to change the animation data. nil if the animation is unloaded.","title":"CanimPose.keyframe"},{"location":"API/Pose/#canimposebone_weights","text":"CanimPose.bone_weights: { [index: string]: number | undefined } = {}; Controls how much individual axis of individual Motor6D Transforms are affected by this animation. you can use __CANIM_DEFAULT_BONE_WEIGHT for the index to affect all bones: animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 1 , 1 , 0.1 ], ]; Note this property is additionally multiplied by CanimPose.weight.","title":"CanimPose.bone_weights"},{"location":"API/Pose/#canimposename","text":"CanimPose.name: string Name of the pose.","title":"CanimPose.name"},{"location":"API/Pose/#canimposepriority","text":"CanimPose.priority: number Priority of the pose.","title":"CanimPose.priority"},{"location":"API/Pose/#canimposefading","text":"CanimPose.fading: boolean Whether the pose is fading out.","title":"CanimPose.fading"},{"location":"API/Pose/#canimposefade_time","text":"CanimPose.fade_time: number Controls how quickly the pose fades out after stopping.","title":"CanimPose.fade_time"},{"location":"API/Pose/#canimposestopping","text":"CanimPose.stopping: boolean If true, the Pose will stop playing at the next Canim.update call.","title":"CanimPose.stopping"},{"location":"API/Pose/#canimposetime","text":"CanimPose.time: number How long the animation has played for.","title":"CanimPose.time"},{"location":"API/Track/","text":"CanimTrack \u00b6 The class used for tracks in the library. It shares many similiarities with CanimPose, however canim avoids inheritance. Methods \u00b6 Events \u00b6 Properties \u00b6","title":"CanimTrack"},{"location":"API/Track/#canimtrack","text":"The class used for tracks in the library. It shares many similiarities with CanimPose, however canim avoids inheritance.","title":"CanimTrack"},{"location":"API/Track/#methods","text":"","title":"Methods"},{"location":"API/Track/#events","text":"","title":"Events"},{"location":"API/Track/#properties","text":"","title":"Properties"},{"location":"Installation/Luau/","text":"Luau \u00b6 Imagine using Luau local Canim = require ( path . to . canim ). Canim -- R15 default dummy local character = game : GetService ( \"Workspace\" ): WaitForChild ( \"dummy\" ) local animator = Canim . new () animator : assign_model ( character ) -- loading poses is the same, but only the 1st keyframe is used. local animation = animator : load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ) animation . finished_loading : Wait () -- automatic retrying is not implemented if not animation . sequence then error ( \"animation couldn't load\" ) end -- the animation will play with lowered rotation and with unaffected position animation . looped = true animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = { { 1 , 1 , 1 }, { 0.5 , 0.5 , 0.5 } } animation . keyframe_reached : Connect ( function ( name ) print ( \"marker reached:\" , name ) end ) animation . started : Connect ( function () print ( \"started\" ) end ) animation . finished : Connect ( function () print ( \"finished\" ) end ) animator : play_animation ( \"dance\" ) game : GetService ( \"RunService\" ). RenderStepped : Connect ( function ( delta_time ) animator : update ( delta_time ) end )","title":"Luau"},{"location":"Installation/Luau/#luau","text":"Imagine using Luau local Canim = require ( path . to . canim ). Canim -- R15 default dummy local character = game : GetService ( \"Workspace\" ): WaitForChild ( \"dummy\" ) local animator = Canim . new () animator : assign_model ( character ) -- loading poses is the same, but only the 1st keyframe is used. local animation = animator : load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ) animation . finished_loading : Wait () -- automatic retrying is not implemented if not animation . sequence then error ( \"animation couldn't load\" ) end -- the animation will play with lowered rotation and with unaffected position animation . looped = true animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = { { 1 , 1 , 1 }, { 0.5 , 0.5 , 0.5 } } animation . keyframe_reached : Connect ( function ( name ) print ( \"marker reached:\" , name ) end ) animation . started : Connect ( function () print ( \"started\" ) end ) animation . finished : Connect ( function () print ( \"finished\" ) end ) animator : play_animation ( \"dance\" ) game : GetService ( \"RunService\" ). RenderStepped : Connect ( function ( delta_time ) animator : update ( delta_time ) end )","title":"Luau"},{"location":"Installation/Typescript/","text":"Typescript \u00b6 simply run npm i @rbxts/canim inside a roblox-ts project. You should be able to use canim now: import { Canim } from \"@rbxts/canim\" ; // R15 default dummy let character = game . GetService ( \"Workspace\" ). WaitForChild ( \"dummy\" ) as Model ; let animator = new Canim (); animator . assign_model ( character ); // loading poses is the same, but only the 1st keyframe is used. let animation = animator . load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ); animation . finished_loading . Wait (); // the animation will play with lowered rotation and with unaffected position animation . looped = true ; animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; animation . keyframe_reached . Connect (( name ) => { print ( \"marker reached:\" , name ); }); animation . started . Connect (() => { print ( \"started\" ); }); animation . finished . Connect (() => { print ( \"finished\" ); }); animator . play_animation ( \"dance\" ); game . GetService ( \"RunService\" ). RenderStepped . Connect (( delta_time ) => { animator . update ( delta_time ); });","title":"Typescript"},{"location":"Installation/Typescript/#typescript","text":"simply run npm i @rbxts/canim inside a roblox-ts project. You should be able to use canim now: import { Canim } from \"@rbxts/canim\" ; // R15 default dummy let character = game . GetService ( \"Workspace\" ). WaitForChild ( \"dummy\" ) as Model ; let animator = new Canim (); animator . assign_model ( character ); // loading poses is the same, but only the 1st keyframe is used. let animation = animator . load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ); animation . finished_loading . Wait (); // the animation will play with lowered rotation and with unaffected position animation . looped = true ; animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; animation . keyframe_reached . Connect (( name ) => { print ( \"marker reached:\" , name ); }); animation . started . Connect (() => { print ( \"started\" ); }); animation . finished . Connect (() => { print ( \"finished\" ); }); animator . play_animation ( \"dance\" ); game . GetService ( \"RunService\" ). RenderStepped . Connect (( delta_time ) => { animator . update ( delta_time ); });","title":"Typescript"},{"location":"Usage/getting-started/","text":"Getting Started \u00b6 How canim works \u00b6 Canim loads animations which are split into tracks and poses. Poses are regular old animations and poses never move. They are useful for static idle animations. todo: \u00b6 basic loading keyframe_reached start, stop poses + tracks using debug rebasing advanced rebasing fading out","title":"Getting Started"},{"location":"Usage/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"Usage/getting-started/#how-canim-works","text":"Canim loads animations which are split into tracks and poses. Poses are regular old animations and poses never move. They are useful for static idle animations.","title":"How canim works"},{"location":"Usage/getting-started/#todo","text":"basic loading keyframe_reached start, stop poses + tracks using debug rebasing advanced rebasing fading out","title":"todo:"}]}