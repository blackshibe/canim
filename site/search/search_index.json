{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Info I give no guarantees about the amount of bugs in this library. While it works without issues in production, there may be problems I am unaware of. If you have questions or issues, feel free to contact me on Discord (Black Shibe#4208) canim is a roblox-ts written library that allows you to have more control over your animations. Features \u00b6 Animation overlap \u00b6 Canim lets you play multiple animations on top of each other if they are rebased. You can see this implemented in Deadline , for example when using the radio and shooting at the same time. Rebasing \u00b6 Deadline reuses magcheck and radio-hold pose animations for multiple weapons easily using animation rebasing. This lets you cut down on time spent animating things. Infinite animation priorities \u00b6 I honestly couldn't tell you why Roblox doesn't implement this already. Animations are sorted based off of number priority, not an Enum with 4 possible values. Editing animations at runtime \u00b6 You can create, import or edit animations when the game is running without having to reupload them. Preloading animations \u00b6 All animations are loaded with a lookup table. You can call it for every needed animation when the game is loading to ensure everything plays instantly after. Separation of concerns \u00b6 Animations are split into Tracks and Poses. Poses only play a single keyframe to increase performance. Non-linear easing \u00b6 Animations fade out with quad in-out easing instead of ugly linear easing. Per-axis blending \u00b6 You can do this: // the animation will play with lowered rotation and with unaffected position animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; Caveats \u00b6 Performance \u00b6 I have not tested how fast the default roblox animator is. Canim flattens the motor structure in order to make lookups when animating faster, but this may break rigs that have multiple Motor6D instances with the same name. Lack of throttling \u00b6 Canim does not implement animator throttling. Easing \u00b6 Canim does not implement any other easing than linear at the moment, considering it is designed to be played with animations exported from blender. This is very easy to implement yourself.","title":"Home"},{"location":"#features","text":"","title":"Features"},{"location":"#animation-overlap","text":"Canim lets you play multiple animations on top of each other if they are rebased. You can see this implemented in Deadline , for example when using the radio and shooting at the same time.","title":"Animation overlap"},{"location":"#rebasing","text":"Deadline reuses magcheck and radio-hold pose animations for multiple weapons easily using animation rebasing. This lets you cut down on time spent animating things.","title":"Rebasing"},{"location":"#infinite-animation-priorities","text":"I honestly couldn't tell you why Roblox doesn't implement this already. Animations are sorted based off of number priority, not an Enum with 4 possible values.","title":"Infinite animation priorities"},{"location":"#editing-animations-at-runtime","text":"You can create, import or edit animations when the game is running without having to reupload them.","title":"Editing animations at runtime"},{"location":"#preloading-animations","text":"All animations are loaded with a lookup table. You can call it for every needed animation when the game is loading to ensure everything plays instantly after.","title":"Preloading animations"},{"location":"#separation-of-concerns","text":"Animations are split into Tracks and Poses. Poses only play a single keyframe to increase performance.","title":"Separation of concerns"},{"location":"#non-linear-easing","text":"Animations fade out with quad in-out easing instead of ugly linear easing.","title":"Non-linear easing"},{"location":"#per-axis-blending","text":"You can do this: // the animation will play with lowered rotation and with unaffected position animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ];","title":"Per-axis blending"},{"location":"#caveats","text":"","title":"Caveats"},{"location":"#performance","text":"I have not tested how fast the default roblox animator is. Canim flattens the motor structure in order to make lookups when animating faster, but this may break rigs that have multiple Motor6D instances with the same name.","title":"Performance"},{"location":"#lack-of-throttling","text":"Canim does not implement animator throttling.","title":"Lack of throttling"},{"location":"#easing","text":"Canim does not implement any other easing than linear at the moment, considering it is designed to be played with animations exported from blender. This is very easy to implement yourself.","title":"Easing"},{"location":"installation/Luau/","text":"Luau \u00b6 Imagine using Luau local Canim = require ( path . to . canim ). Canim -- R15 default dummy local character = game : GetService ( \"Workspace\" ): WaitForChild ( \"dummy\" ) local animator = Canim . new () animator : assign_model ( character ) -- loading poses is the same, but only the 1st keyframe is used. local animation = animator : load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ) animation . finished_loading : Wait () -- automatic retrying is not implemented if not animation . sequence then error ( \"animation couldn't load\" ) end -- the animation will play with lowered rotation and with unaffected position animation . looped = true animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = { { 1 , 1 , 1 }, { 0.5 , 0.5 , 0.5 } } animation . keyframe_reached : Connect ( function ( name ) print ( \"marker reached:\" , name ) end ) animation . started : Connect ( function () print ( \"started\" ) end ) animation . finished : Connect ( function () print ( \"finished\" ) end ) animator : play_animation ( \"dance\" ) game : GetService ( \"RunService\" ). RenderStepped : Connect ( function ( delta_time ) animator : update ( delta_time ) end )","title":"Luau"},{"location":"installation/Luau/#luau","text":"Imagine using Luau local Canim = require ( path . to . canim ). Canim -- R15 default dummy local character = game : GetService ( \"Workspace\" ): WaitForChild ( \"dummy\" ) local animator = Canim . new () animator : assign_model ( character ) -- loading poses is the same, but only the 1st keyframe is used. local animation = animator : load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ) animation . finished_loading : Wait () -- automatic retrying is not implemented if not animation . sequence then error ( \"animation couldn't load\" ) end -- the animation will play with lowered rotation and with unaffected position animation . looped = true animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = { { 1 , 1 , 1 }, { 0.5 , 0.5 , 0.5 } } animation . keyframe_reached : Connect ( function ( name ) print ( \"marker reached:\" , name ) end ) animation . started : Connect ( function () print ( \"started\" ) end ) animation . finished : Connect ( function () print ( \"finished\" ) end ) animator : play_animation ( \"dance\" ) game : GetService ( \"RunService\" ). RenderStepped : Connect ( function ( delta_time ) animator : update ( delta_time ) end )","title":"Luau"},{"location":"installation/Typescript/","text":"Typescript \u00b6 simply run npm i @rbxts/canim inside a roblox-ts project. You should be able to use canim now: import { Canim } from \"@rbxts/canim\" ; // R15 default dummy let character = game . GetService ( \"Workspace\" ). WaitForChild ( \"dummy\" ) as Model ; let animator = new Canim (); animator . assign_model ( character ); // loading poses is the same, but only the 1st keyframe is used. let animation = animator . load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ); animation . finished_loading . Wait (); // automatic retrying is not implemented if ( ! animation . sequence ) throw \"animation couldn't load\" ; // the animation will play with lowered rotation and with unaffected position animation . looped = true ; animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; animation . keyframe_reached . Connect (( name ) => { print ( \"marker reached:\" , name ); }); animation . started . Connect (() => { print ( \"started\" ); }); animation . finished . Connect (() => { print ( \"finished\" ); }); animator . play_animation ( \"dance\" ); game . GetService ( \"RunService\" ). RenderStepped . Connect (( delta_time ) => { animator . update ( delta_time ); });","title":"Typescript"},{"location":"installation/Typescript/#typescript","text":"simply run npm i @rbxts/canim inside a roblox-ts project. You should be able to use canim now: import { Canim } from \"@rbxts/canim\" ; // R15 default dummy let character = game . GetService ( \"Workspace\" ). WaitForChild ( \"dummy\" ) as Model ; let animator = new Canim (); animator . assign_model ( character ); // loading poses is the same, but only the 1st keyframe is used. let animation = animator . load_animation ( \"dance\" , 1 , \"rbxassetid://507771019\" ); animation . finished_loading . Wait (); // automatic retrying is not implemented if ( ! animation . sequence ) throw \"animation couldn't load\" ; // the animation will play with lowered rotation and with unaffected position animation . looped = true ; animation . bone_weights . __CANIM_DEFAULT_BONE_WEIGHT = [ // x y z [ 1 , 1 , 1 ], // rx ry rz [ 0.5 , 0.5 , 0.5 ], ]; animation . keyframe_reached . Connect (( name ) => { print ( \"marker reached:\" , name ); }); animation . started . Connect (() => { print ( \"started\" ); }); animation . finished . Connect (() => { print ( \"finished\" ); }); animator . play_animation ( \"dance\" ); game . GetService ( \"RunService\" ). RenderStepped . Connect (( delta_time ) => { animator . update ( delta_time ); });","title":"Typescript"}]}